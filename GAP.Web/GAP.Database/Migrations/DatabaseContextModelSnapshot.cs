// <auto-generated />
using System;
using GAP.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GAP.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GAP.Domain.AppointmentEntity", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate");

                    b.Property<long>("CustomerId");

                    b.Property<int>("DepartmentTypeId");

                    b.Property<int>("Status");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("GAP.Domain.CustomerEntity", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1L,
                            Email = "anderson.chica@hotmail.com",
                            FullName = "Anderson Chica"
                        },
                        new
                        {
                            CustomerId = 2L,
                            Email = "carlos.upegui@hotmail.com",
                            FullName = "Carlos Upegui"
                        },
                        new
                        {
                            CustomerId = 3L,
                            Email = "david.jaramillo@hotmail.com",
                            FullName = "David Jaramillo"
                        },
                        new
                        {
                            CustomerId = 4L,
                            Email = "juan.patino@hotmail.com",
                            FullName = "Juan Patiño"
                        });
                });

            modelBuilder.Entity("GAP.Domain.DepartmentType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Odontology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Neurology"
                        });
                });

            modelBuilder.Entity("GAP.Domain.UserEntity", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("Roles");

                    b.Property<int>("Status");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            Email = "administrator@administrator.com",
                            Roles = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("GAP.Domain.AppointmentEntity", b =>
                {
                    b.HasOne("GAP.Domain.CustomerEntity", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GAP.Domain.DepartmentType", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GAP.Domain.UserEntity", b =>
                {
                    b.OwnsOne("GAP.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<long>("UserEntityUserId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(200);

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.HasOne("GAP.Domain.UserEntity")
                                .WithOne("FullName")
                                .HasForeignKey("GAP.Domain.ValueObjects.FullName", "UserEntityUserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new
                                {
                                    UserEntityUserId = 1L,
                                    Name = "Administrator",
                                    Surname = "Administrator"
                                });
                        });

                    b.OwnsOne("GAP.Domain.ValueObjects.SignIn", "SignIn", b1 =>
                        {
                            b1.Property<long>("UserEntityUserId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Login")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasMaxLength(500);

                            b1.HasKey("UserEntityUserId");

                            b1.HasIndex("Login")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.HasOne("GAP.Domain.UserEntity")
                                .WithOne("SignIn")
                                .HasForeignKey("GAP.Domain.ValueObjects.SignIn", "UserEntityUserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new
                                {
                                    UserEntityUserId = 1L,
                                    Login = "admin",
                                    Password = "1h0ATANFe6x7kMHo1PURE74WI0ayevUwfK/+Ie+IWX/xWrFWngcVUwL/ewryn38EMVMQBFaNo4SaVwgXaBWnDw=="
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
